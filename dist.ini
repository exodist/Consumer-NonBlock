name    = Consumer-NonBlock
author  = Chad Granum <exodist@cpan.org>
license = Perl_5
copyright_holder = Chad Granum

[RewriteVersion] ; sets dist version from main module's $VERSION
[License]
[ManifestSkip]
[Manifest]
[NextRelease]
[GatherFile]

[GatherDir]
exclude_match = ^cover
exclude_match = ^nyt
exclude_match = ^test-logs
exclude_filename = LICENSE
exclude_filename = Makefile.PL
exclude_filename = cpanfile
exclude_filename = cpanfile.ci
exclude_filename = README
exclude_filename = README.md
exclude_filename = .yath-persist.json

[PodSyntaxTests]
[TestRelease]

[MetaResources]
bugtracker.web  = https://github.com/exodist/Consumer-NonBlock/issues
repository.url  = https://github.com/exodist/Consumer-NonBlock/
repository.type = git

[Prereqs]
perl             = 5.010000
IO::Handle       = 1.27
Carp             = 0
Fcntl            = 0
File::Path       = 0
File::Spec       = 0
File::Temp       = 0
Object::HashBase = 0
Time::HiRes      = 0

[Prereqs / TestRequires]
Test2::V0 = 0.000127

[MakeMaker::Awesome]
:version = 0.26
delimiter = |
header = |use Config qw/%Config/;
header = |die "Platform ($^O) not supported, patches welcome!\n"
header = |  if $^O =~ m/(dos|os2)/i;
header = |if ($ENV{AUTOMATED_TESTING}) {
header = |    my $is_njh = 0;
header = |    $is_njh ||= -d '/export/home/njh';
header = |    $is_njh ||= -d '/home/njh';
header = |    $is_njh ||= lc($ENV{USER} // 'na') eq 'njh';
header = |    $is_njh ||= lc($ENV{HOME} // 'na') =~ m{njh$};
header = |    $is_njh ||= lc($ENV{PATH} // 'na') =~ m{/njh/};
header = |    die "OS unsupported\nNJH smokers are broken, aborting tests.\n"
header = |        if $is_njh;
header = |}

[CPANFile]
[MetaYAML]
[MetaJSON]

; authordep Pod::Markdown
[ReadmeFromPod / Markdown]
filename = lib/Consumer/NonBlock.pm
type = markdown
readme = README.md

[ReadmeFromPod / Text]
filename = lib/Consumer/NonBlock.pm
type = text
readme = README

[CopyFilesFromBuild]
copy = LICENSE
copy = cpanfile
copy = README
copy = README.md
copy = Makefile.PL

[Git::Check]
allow_dirty = Makefile.PL
allow_dirty = README
allow_dirty = README.md
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = Changes

[Git::Commit]
allow_dirty = Makefile.PL
allow_dirty = README
allow_dirty = README.md
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = Changes

[Git::Tag]

[FakeRelease]

[BumpVersionAfterRelease]

[Git::Commit / Commit_Changes]
munge_makefile_pl = true
allow_dirty_match = ^lib
allow_dirty = Makefile.PL
allow_dirty = README
allow_dirty = README.md
allow_dirty = cpanfile
allow_dirty = LICENSE
commit_msg = Automated Version Bump
